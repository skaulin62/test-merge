{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { getCartFromLS, changeTotalPrice } from \"../../utils/cartLocalStorage.ts\";\nconst initialState = {\n  totalPrice: changeTotalPrice(getCartFromLS()),\n  items: getCartFromLS()\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addItem(state, action) {\n      const findItem = state.items.find(obj => obj.id === action.payload.id);\n      if (findItem) {\n        findItem.count++;\n      } else {\n        state.items.push({\n          ...action.payload,\n          count: 1\n        });\n      }\n      state.totalPrice = changeTotalPrice(state.items);\n    },\n    minusItem(state, action) {\n      const findItem = state.items.find(obj => obj.id === action.payload.id);\n      if (findItem) {\n        if (findItem.count > 0) findItem.count--;\n      }\n      state.totalPrice = changeTotalPrice(state.items);\n    },\n    removeItem(state, action) {\n      state.items = state.items.filter(item => item.id !== action.payload.id);\n      state.totalPrice = changeTotalPrice(state.items);\n    },\n    clearItems(state) {\n      state.items = [];\n      state.totalPrice = changeTotalPrice(state.items);\n    }\n  }\n});\nexport const selectorCart = state => state.cart;\nexport const selectorFind = id => state => state.cart.items.find(obj => obj.id === id);\nexport const {\n  addItem,\n  removeItem,\n  clearItems,\n  minusItem\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","getCartFromLS","changeTotalPrice","initialState","totalPrice","items","cartSlice","name","reducers","addItem","state","action","findItem","find","obj","id","payload","count","push","minusItem","removeItem","filter","item","clearItems","selectorCart","cart","selectorFind","actions","reducer"],"sources":["C:/Users/skaullin62/Desktop/ReactAppsTS/pizza/src/Redux/slices/cardSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../store\";\r\nimport {getCartFromLS, changeTotalPrice} from \"../../utils/cartLocalStorage.ts\";\r\nimport { stat } from \"fs\";\r\n\r\n\r\nexport type Item = {\r\n  id: string,\r\n  imageUrl: string,\r\n  title: string,\r\n  type: string,\r\n  size: number,\r\n  price: number,\r\n  category: number,\r\n  rating: number,\r\n  count: number\r\n\r\n}\r\n\r\ninterface IItem {\r\n  totalPrice: number,\r\n  items: Item[],\r\n}\r\n\r\nconst initialState: IItem = {\r\n  totalPrice: changeTotalPrice(getCartFromLS()),\r\n  items: getCartFromLS()\r\n\r\n};\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState,\r\n  reducers: {\r\n    addItem(state, action: PayloadAction<Item>) {\r\n      const findItem = state.items.find((obj) => obj.id === action.payload.id);\r\n      if (findItem) {\r\n        findItem.count++;\r\n      } else {\r\n        state.items.push({ ...action.payload, count: 1 });\r\n      }\r\n      state.totalPrice =changeTotalPrice(state.items)\r\n    },\r\n\r\n    minusItem(state, action: PayloadAction<Item>) {\r\n      const findItem = state.items.find((obj) => obj.id === action.payload.id);\r\n      if (findItem) {\r\n        if(findItem.count > 0)\r\n        findItem.count--;\r\n      }\r\n      state.totalPrice =changeTotalPrice(state.items)\r\n    },\r\n    removeItem(state, action: PayloadAction<Item>) {\r\n      state.items = state.items.filter((item) => item.id !== action.payload.id);\r\n      state.totalPrice =changeTotalPrice(state.items)\r\n    },\r\n    clearItems(state) {\r\n      state.items = [];\r\n      state.totalPrice =changeTotalPrice(state.items)\r\n    },\r\n  },\r\n});\r\n\r\nexport const selectorCart = (state: RootState) => state.cart;\r\nexport const selectorFind = (id: string) => (state: RootState) =>\r\n  state.cart.items.find((obj) => obj.id === id);\r\nexport const { addItem, removeItem, clearItems, minusItem } = cartSlice.actions;\r\n\r\nexport default cartSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,SAAQC,aAAa,EAAEC,gBAAgB,QAAO,iCAAiC;AAsB/E,MAAMC,YAAmB,GAAG;EAC1BC,UAAU,EAAEF,gBAAgB,CAACD,aAAa,CAAC,CAAC,CAAC;EAC7CI,KAAK,EAAEJ,aAAa,CAAC;AAEvB,CAAC;AAED,MAAMK,SAAS,GAAGN,WAAW,CAAC;EAC5BO,IAAI,EAAE,MAAM;EACZJ,YAAY;EACZK,QAAQ,EAAE;IACRC,OAAOA,CAACC,KAAK,EAAEC,MAA2B,EAAE;MAC1C,MAAMC,QAAQ,GAAGF,KAAK,CAACL,KAAK,CAACQ,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACD,EAAE,CAAC;MACxE,IAAIH,QAAQ,EAAE;QACZA,QAAQ,CAACK,KAAK,EAAE;MAClB,CAAC,MAAM;QACLP,KAAK,CAACL,KAAK,CAACa,IAAI,CAAC;UAAE,GAAGP,MAAM,CAACK,OAAO;UAAEC,KAAK,EAAE;QAAE,CAAC,CAAC;MACnD;MACAP,KAAK,CAACN,UAAU,GAAEF,gBAAgB,CAACQ,KAAK,CAACL,KAAK,CAAC;IACjD,CAAC;IAEDc,SAASA,CAACT,KAAK,EAAEC,MAA2B,EAAE;MAC5C,MAAMC,QAAQ,GAAGF,KAAK,CAACL,KAAK,CAACQ,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACD,EAAE,CAAC;MACxE,IAAIH,QAAQ,EAAE;QACZ,IAAGA,QAAQ,CAACK,KAAK,GAAG,CAAC,EACrBL,QAAQ,CAACK,KAAK,EAAE;MAClB;MACAP,KAAK,CAACN,UAAU,GAAEF,gBAAgB,CAACQ,KAAK,CAACL,KAAK,CAAC;IACjD,CAAC;IACDe,UAAUA,CAACV,KAAK,EAAEC,MAA2B,EAAE;MAC7CD,KAAK,CAACL,KAAK,GAAGK,KAAK,CAACL,KAAK,CAACgB,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACP,EAAE,KAAKJ,MAAM,CAACK,OAAO,CAACD,EAAE,CAAC;MACzEL,KAAK,CAACN,UAAU,GAAEF,gBAAgB,CAACQ,KAAK,CAACL,KAAK,CAAC;IACjD,CAAC;IACDkB,UAAUA,CAACb,KAAK,EAAE;MAChBA,KAAK,CAACL,KAAK,GAAG,EAAE;MAChBK,KAAK,CAACN,UAAU,GAAEF,gBAAgB,CAACQ,KAAK,CAACL,KAAK,CAAC;IACjD;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMmB,YAAY,GAAId,KAAgB,IAAKA,KAAK,CAACe,IAAI;AAC5D,OAAO,MAAMC,YAAY,GAAIX,EAAU,IAAML,KAAgB,IAC3DA,KAAK,CAACe,IAAI,CAACpB,KAAK,CAACQ,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKA,EAAE,CAAC;AAC/C,OAAO,MAAM;EAAEN,OAAO;EAAEW,UAAU;EAAEG,UAAU;EAAEJ;AAAU,CAAC,GAAGb,SAAS,CAACqB,OAAO;AAE/E,eAAerB,SAAS,CAACsB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}