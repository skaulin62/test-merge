{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport { useMemo } from \"react\";\nexport function useSort(array, sort, type) {\n  _s();\n  const sortedArray = useMemo(() => {\n    let sorted = [];\n    if (type === \"number\") {\n      if (sort.title.includes(\"(asc)\")) {\n        sorted = array.sort((objA, objB) => objA[sort.sort] - objB[sort.sort]);\n      } else {\n        sorted = array.sort((objA, objB) => objB[sort.sort] - objA[sort.sort]);\n      }\n    } else {\n      if (sort.title.includes(\"(asc)\")) {\n        sorted = array.sort((objA, objB) => objA[sort.sort].localeCompare(objB[sort.sort]));\n      } else {\n        sorted = array.sort((objA, objB) => objB[sort.sort].localeCompare(objA[sort.sort]));\n      }\n    }\n    return sorted;\n  }, [array, sort]);\n  return sortedArray;\n}\n_s(useSort, \"O277kNNipAM+CrHegm20Naxvnh4=\");\nexport function useCategory(array, sort, type, category, searchValue) {\n  _s3();\n  var _s2 = $RefreshSig$();\n  const sortedArray = useSort(array, sort, type);\n  const filteredArray = _s2(useMemo(_s2(() => {\n    _s2();\n    if (category === 0) return useSearch(sortedArray, searchValue);\n    return useSearch(sortedArray.filter(item => item.category === category), searchValue);\n  }, \"36HHESd2uuJeGCPfxW7RXQP2VkY=\", false, function () {\n    return [useSearch, useSearch];\n  }), [array, category, sort]), \"36HHESd2uuJeGCPfxW7RXQP2VkY=\", false, function () {\n    return [useSearch, useSearch];\n  });\n  return filteredArray;\n}\n_s3(useCategory, \"MaOIgJoe0CttOQf9tQyzjnDCuT0=\", false, function () {\n  return [useSort];\n});\nexport function useSearch(array, searchValue) {\n  _s4();\n  const searchedArray = useMemo(() => {\n    if (searchValue) return array.filter(item => item.toLowerCase().includes(searchValue.toLowerCase()));\n    return array;\n  }, [searchValue, array]);\n  return searchedArray;\n}\n_s4(useSearch, \"0OlgBos/UCbT4+zgz2QHvUbeH5k=\");","map":{"version":3,"names":["useMemo","useSort","array","sort","type","_s","sortedArray","sorted","title","includes","objA","objB","localeCompare","useCategory","category","searchValue","_s3","_s2","$RefreshSig$","filteredArray","useSearch","filter","item","_s4","searchedArray","toLowerCase"],"sources":["C:/Users/skaullin62/Desktop/ReactAppsTS/pizza/src/hooks/usePizzas.js"],"sourcesContent":["import { useMemo } from \"react\";\r\n\r\nexport function useSort(array, sort, type) {\r\n  const sortedArray = useMemo(() => {\r\n    let sorted = [];\r\n    if (type === \"number\") {\r\n      if (sort.title.includes(\"(asc)\")) {\r\n        sorted = array.sort((objA, objB) => objA[sort.sort] - objB[sort.sort]);\r\n      } else {\r\n        sorted = array.sort((objA, objB) => objB[sort.sort] - objA[sort.sort]);\r\n      }\r\n    } else {\r\n      if (sort.title.includes(\"(asc)\")) {\r\n        sorted = array.sort((objA, objB) =>\r\n          objA[sort.sort].localeCompare(objB[sort.sort])\r\n        );\r\n      } else {\r\n        sorted = array.sort((objA, objB) =>\r\n          objB[sort.sort].localeCompare(objA[sort.sort])\r\n        );\r\n      }\r\n    }\r\n\r\n    return sorted;\r\n  }, [array, sort]);\r\n  return sortedArray;\r\n}\r\n\r\nexport function useCategory(array, sort, type, category, searchValue) {\r\n  const sortedArray = useSort(array, sort, type);\r\n  const filteredArray = useMemo(() => {\r\n    if (category === 0) return useSearch(sortedArray, searchValue);\r\n\r\n    return useSearch(\r\n      sortedArray.filter((item) => item.category === category),\r\n      searchValue\r\n    );\r\n  }, [array, category, sort]);\r\n  return filteredArray;\r\n}\r\n\r\nexport function useSearch(array, searchValue) {\r\n  const searchedArray = useMemo(() => {\r\n    if (searchValue)\r\n      return array.filter((item) =>\r\n        item.toLowerCase().includes(searchValue.toLowerCase())\r\n      );\r\n    return array;\r\n  }, [searchValue, array]);\r\n  return searchedArray;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}